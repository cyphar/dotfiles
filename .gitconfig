# dotfiles: collection of my personal dotfiles
# Copyright (C) 2012-2019 Aleksa Sarai <cyphar@cyphar.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

[core]
	# Recommended kernel default. It's amazing how many things this breaks.
	abbrev = 12

	# Whitespace.
	whitespace = trailing-space,space-before-tab

[user]
	# XXX: Change this when you're using these configs.
	name  = Aleksa Sarai
	email = cyphar@cyphar.com

[commit]
	# Sign every commit. People have complicated views on this, but in
	# general I'm of the belief that not signing commits means that
	# you're putting far too much faith in maintainers manually
	# verifying source code before releasing it. We don't check every
	# line of code before signing a tag, so sign every commit I've
	# authored.
	gpgsign = true

[gpg]
	program = gpg2

[init]
	defaultBranch = "main"

[alias]
	# Very useful aliases for getting the state of a repo.
	id = "rev-parse --verify HEAD"
	lg = "log --graph --abbrev-commit \
	          --pretty=format:'%Cred%h %C(bold red)(%G?)%Creset -%C(yellow)%d%Creset %s %Cgreen(%ar %C(bold green)%cr) %C(bold blue)<%an>%Creset'"
	# Short form for kernel comments.
	one = "show -s --pretty='format:%h (\"%s\")'"

	# Information about the current checked out repo.
	# These are just better versions of the defaults.
	st = "status --long"
	tg = "tag -l"
	br = "branch -v"
	re = "remote -v"

	# The obvious counterpart to git-grep.
	sed = !"sed() { git ls-files --no-recurse-submodules -z | \
		xargs -0 -I:: find :: -maxdepth 0 -type f -print0 | \
		xargs -0 sed -Ei \"$@\"; }; sed"

	# Updates and merging.
	up  = "pull --rebase"
	sup = "submodule foreach --recursive git pull origin master"
	sin = "submodule update --init --recursive"
	mm = "merge --no-ff --log"

	# Pulls / checks out a GitHub pull request from origin.
	# TODO: Improve this so it also works with Gogs and GitLab.
	pr = !"pr() { git fetch origin pull/$1/head:pr-$1; }; pr"
	cpr = !"cpr() { git fetch origin pull/$1/head:pr-$1 && git checkout pr-$1; }; cpr"

	# Commit all the things!
	cc = !"cc() { git add -A && git commit -av; }; cc"

	# Rebasing.
	reb = !"reb() { git rebase -i HEAD~$i; }; reb"

	# Finding commits.
	ft = !"ft() { git tag --contains $1; }; ft"
	fb = !"fb() { git branch -a --contains $1; }; fb"

	# Cleaning up a repo. Deletes commits already merged against master.
	dm = !"dm() { git branch --merged | grep -v '\\*' | xargs -n 1 -- git branch -d; }; dm"

	# Get the list of authors and commiters from a range-ish.
	la = !"la() { git log --pretty=format:'%aN <%ae>' $1 | sort -u; }; la"
	lc = !"lc() { git log --pretty=format:'%cN <%ce>' $1 | sort -u; }; lc"

	# Get the count of authors and commiters from a range-ish.
	lla = !"lla() { git log --pretty=format:'%aN <%ae>' $1 | sort | uniq -c | sort -k1 -nr; }; lla"
	llc = !"llc() { git log --pretty=format:'%cN <%ce>' $1 | sort | uniq -c | sort -k1 -nr; }; llc"

	# Email wrapper.
	se = "send-email --no-format-patch --no-chain-reply-to"

	# Search for merge commits.
	find-merge = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
	show-merge = "!sh -c 'merge=$(git find-merge $0 $1) && [ -n \"$merge\" ] && git show $merge'"

[color]
	# Enable colours because we're not in the 80s anymore, Toto.
	ui = true
	interactive = always

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
	upstream = red

[color "diff"]
	meta = yellow bold
	frag = magenta bold
	func = yellow
	old = red
	new = green

[color "status"]
	added = green
	changed = yellow
	untracked = red

[color "grep"]
	filename = magenta
	linenumber = blue
	separator = cyan
	function = yellow

[credential]
	helper = cache

[merge]
	tool = vimdiff

[push]
	default = simple

[apply]
	# Make sure whitespace is clean when we commit it.
	whitespace = fix

[sendemail]
	identity = cyphar

[sendemail.cyphar]
	smtpDomain = "[redacted]"
	smtpUser = cyphar@cyphar.com
	smtpServer = smtp.mailbox.org
	smtpServerPort = 465
	smtpEncryption = ssl
