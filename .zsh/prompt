#!/bin/zsh
# This is free and unencumbered software released into the public domain.

# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.

# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Enable prompt substitution and colours.
autoload -U colors; colors
setopt promptsubst

# Emacs mode.
bindkey -e

# Set up prompt.
function __generate_prompt() {
	# Save old exit code first.
	local exit_code="$?"

	# Locals.
	local user_prompt
	local path_prompt
	local ret_prompt

	# User information.
	if [[ "${EUID}" == "0" ]]; then
		user_prompt="%{$fg_bold[red]%}%M%{$reset_color%}"
	else
		user_prompt="%{$fg_bold[green]%}%n%{$reset_color%}%{$fg[green]%}@%M%{$reset_color%}"
	fi

	# Git branch and ref information.
	# Everything is calculated inside this shell script (no calls to `git` are
	# made). This is because on large projects (like, say, the kernel) git can
	# take >1 minute to figure out what branch and ref HEAD is pointing to. The
	# filesystem is faster. However, we have to fall back in *one* case, when
	# we are sitting on a packed ref or a repo which was recently gc'd -- in
	# that case `git` is faster and easier.
	function __git_info() {
		function __find_git() {
			local __current="$1"

			# Search up the directory tree for '.git'.
			while [[ "${__current}" != "/" ]]; do
				if [[ -d "${__current}/.git" ]]; then
					echo "${__current}/.git"
					return 0
				fi

				__current="$(dirname -- "${__current}")"
			done

			# Check for '/.git'.
			if [[ -d "${__current}/.git" ]]; then
				echo "${__current}/.git"
				return 0
			fi

			return 1
		}

		# Get the current branch ref from '.git/HEAD' and '.git/refs/heads'.
		function __get_branch() {
			local __gitdir="$1"

			if (grep -v "^ref: refs/heads/.*$" -- "${__gitdir}/HEAD" &>/dev/null); then
				# Detached state -- no branch name.
				return 1
			fi

			# Get the ref path.
			local __refpath="$(cut -d' ' -f2 -- "${__gitdir}/HEAD")"

			# Yield the actual branch name from the __refpath.
			echo "$(basename -- "${__refpath}")"
			return 0
		}

		# Get short commit hash.
		function __get_short_ref() {
			local __gitdir="$1"
			local __ref

			# Detached state -- ref is in 'ref'.
			if ! (__get_branch "${__gitdir}" &>/dev/null); then
				__ref="$(< "${__gitdir}/HEAD")"
			else
				# Get the ref path.
				local __refpath="$(cut -d' ' -f2 -- "${__gitdir}/HEAD")"

				# Check that the __refpath exists.
				if ! [[ -f "${__gitdir}/${__refpath}" ]]; then
					# If not, we might be on a commit in a packed ref.
					# Fallback to `git` in this case -- we can't do better.
					__ref="$(git rev-parse --verify HEAD)"

					# We don't have a commit.
					if [[ "$?" != 0 ]]; then
						return 1
					fi
				else
					# Get the commit hash from the ref path.
					__ref="$(< "${__gitdir}/${__refpath}")"
				fi
			fi

			# Shorten the ref to 12 characters.
			# Why 12? Because that's what the kernel tells us is good.
			# In Linus we trust.
			echo "$__ref[1,12]"
			return 0
		}

		# Most shells (zsh included) like to be clever with symlinks. This breaks
		# things like symlinks into subdirectories of git repositories (because
		# `pwd` lies to you). Fix this by using the `pwd` command which isn't
		# magical.
		local __pwd="$(command pwd)"

		if (__find_git "${__pwd}" &>/dev/null); then
			# Get the closest git directory.
			local __gitdir="$(__find_git "${__pwd}")"

			# Figure out if in detached state.
			local __info
			if (__get_branch "${__gitdir}" &>/dev/null); then
				__info="%{$fg_bold[magenta]%}$(__get_branch "${__gitdir}")%{$reset_color%}"
			else
				__info="%{$fg_bold[red]%}{detached}%{$reset_color%}"
			fi

			# Figure out short ref.
			local __ref
			if (__get_short_ref "${__gitdir}" &>/dev/null); then
				__ref="%{$fg[magenta]%}$(__get_short_ref "${__gitdir}")%{$reset_color%}"
			else
				__ref="%{$fg[red]%}000000000000%{$reset_color%}"
			fi

			echo " git:(${__info}:${__ref})"
		fi
	}

	# Mercurial branch information.
	function __hg_info() {
		# Hot path: check that there isn't a parent .hg/ directory.
		# We don't implement parsing (I don't clone big hg project often enough
		# to care).
		function __find_hg() {
			local __current="$1"

			# Search up the directory tree for '.git'.
			while [[ "${__current}" != "/" ]]; do
				if [[ -d "${__current}/.hg" ]]; then
					echo "${__current}/.hg"
					return 0
				fi

				__current="$(dirname -- "${__current}")"
			done

			# Check for '/.hg'.
			if [[ -d "${__current}/.hg" ]]; then
				echo "${__current}/.hg"
				return 0
			fi

			return 1
		}

		# Most shells (zsh included) like to be clever with symlinks. This breaks
		# things like symlinks into subdirectories of git repositories (because
		# `pwd` lies to you). Fix this by using the `pwd` command which isn't
		# magical.
		local __pwd="$(command pwd)"

		if (__find_hg "${__pwd}" && hg status &>/dev/null); then
			local __branch="$(hg branch)"
			local __ref="$(hg id | cut -d' ' -f1)"

			echo " hg:(%{$fg_bold[magenta]%}${__branch}%{$reset_color%}:%{$fg[magenta]%}${__ref}%{$reset_color%})"
		fi
	}

	# Get the last part of the given path, with tilde replacement.
	function __nice_path() {
		local __path="$1"

		if [[ "${__path}" == "${HOME}" ]]; then
			__path="~"
		else
			__path="$(basename ${__path})"
		fi

		echo "${__path}"
	}

	# Path information.
	path_prompt="%{$fg_bold[blue]%}$(__nice_path "$(pwd)")%{$reset_color%}$(__git_info)$(__hg_info)"

	# Return prompt based on exit code of last command.
	function __ret_prompt() {
		local __exit_code="$1"
		local __prompt="%#"

		if [[ "${__exit_code}" != "0" ]]; then
			__prompt="%{$fg_bold[red]%}${__prompt}%{$reset_color%}"
		fi

		echo "${__prompt} "
	}
	ret_prompt="$(__ret_prompt "${exit_code}")"

	# Get loadavg for last minute.
	function __loadavg() {
		[[ -f "/proc/loadavg" ]] && echo "$(cat /proc/loadavg 2>/dev/null | cut -d' ' -f1)"
	}

	# Get number of processes, if we can.
	function __nproc() {
		echo "$(nproc 2>/dev/null || echo '?')"
	}

	# Actually set up prompts.
	export PROMPT="$user_prompt %{$fg[cyan]%}::%{$reset_color%} $path_prompt $ret_prompt"
	export RPROMPT="[$(uname -o) $(__loadavg)($(__nproc))]"

	# Set up secondary prompts.
	export PROMPT2="%_> "
	export PROMPT3="?#> "
	export PROMPT4="+> "
}

# Set up precmd hook to set up prompt.
function precmd() {
	__generate_prompt
}
