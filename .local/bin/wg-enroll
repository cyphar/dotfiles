#!/bin/zsh
# wg-enroll: enroll a new wireguard client
# Copyright (C) 2019 Aleksa Sarai <cyphar@cyphar.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

set -Eeuo pipefail

function bail() {
	echo "$@" >&2
	exit 2
}

function usage() {
	bail "usage: wg-enroll [-C <config-root=$CONFIG_ROOT>]\n" \
	     "                [-F <endpoint=$SERVER_ENDPOINT>]\n" \
	     "                [-i <interface=$CONFIG_NAME>]\n" \
	     "                [-n <network-id=$NETWORKID>]\n" \
	     "                [-o <format=$OUTPUT>]"
}

local NETWORKID=0
local CONFIG_ROOT="/etc/wireguard"
local CONFIG_NAME="wg-$HOST"
local SERVER_ENDPOINT="$(< /etc/hostname)"
local OUTPUT="qr"

while getopts "C:F:i:n:o:h" opt; do
	case "$opt" in
		C)
			CONFIG_ROOT="$OPTARG"
			;;
		F)
			SERVER_ENDPOINT="$OPTARG"
			;;
		i)
			CONFIG_NAME="$OPTARG"
			;;
		n)
			NETWORKID="$OPTARG"
			;;
		o)
			OUTPUT="$OPTARG"
			;;
		h)
			usage
			;;
		\:)
			echo "missing argument: -$OPTARG" >&2
			usage
			;;
		\?)
			echo "invalid option: -$OPTARG" >&2
			usage
			;;
	esac
done

function qrencode_cat() {
	qrencode -t ansiutf8
}

local formatter=
case "$OUTPUT" in
	qr)
		formatter=qrencode_cat
		;;
	text)
		formatter=cat
		;;
	*)
		bail "unknown formatter $OUTPUT"
		;;
esac

local CONFIG="$CONFIG_ROOT/$CONFIG_NAME.conf"

# Not exactly pretty...
local CLIENT_SECKEY="$(wg genkey)"
local CLIENT_PUBKEY="$(wg pubkey <<<"$CLIENT_SECKEY")"
local PRESHAREDKEY="$(wg genpsk)"

[[ -n "$CLIENT_PUBKEY" ]] || bail "ERROR: Failed to generate public key using $CLIENT_SECKEY."

# TODO: Parse TOML properly...
local NEW_DEVICEID="$(($(grep "\[Peer\]" "$CONFIG" | wc -l) + 1))"
local SERVER_PUBKEY="$(grep "PrivateKey = " "$CONFIG" | sed -E 's/^[^=]*= (.*)$/\1/' | wg pubkey)"

# Add to configuration.
(
cat "$CONFIG"
cat <<EOF

# device-$NEW_DEVICEID.cyphar.com
[Peer]
PublicKey = $(wg pubkey <<<"$CLIENT_SECKEY")
PreSharedKey = $PRESHAREDKEY
AllowedIPs = 10.$NETWORKID.$NEW_DEVICEID.1/32
EOF
) | sponge "$CONFIG"

# Generate QR code for new device.
"$formatter" <<EOF
[Interface]
Address = 10.$NETWORKID.$NEW_DEVICEID.1/16
PrivateKey = $CLIENT_SECKEY

[Peer]
Endpoint = $SERVER_ENDPOINT:51820
PublicKey = $SERVER_PUBKEY
PreSharedKey = $PRESHAREDKEY
AllowedIPs = 0.0.0.0/0
EOF
