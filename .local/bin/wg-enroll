#!/bin/zsh
# wg-enroll: enroll a new wireguard client
# Copyright (C) 2019 Aleksa Sarai <cyphar@cyphar.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

set -Eeuo pipefail

function bail() {
	echo "ERROR:" "$@" >&2
	exit 2
}

function log() {
	echo "INFO:" "$@" >&2
}

function generate_addresses() {
	local DEVICEID="${1:-0}"
	local MASK="${2:-32}"

	# The two arguments are {NETWORKID, DEVICEID}.
	IPV4_FORMAT="10.%d.%d.1"
	IPV6_FORMAT="fd42:dead:beef:%.2x%.2x::1"

	# Generate our addresses.
	ipv4="$(printf "$IPV4_FORMAT" "$NETWORKID" "$DEVICEID")"
	ipv6="$(printf "$IPV6_FORMAT" "$NETWORKID" "$DEVICEID")"
	echo "$ipv4/$MASK,$ipv6/$MASK"
}

function usage() {
	bail "usage: wg-enroll [-C <config-root=$CONFIG_ROOT>]\n" \
	     "                [-F <endpoint=$SERVER_ENDPOINT>]\n" \
	     "                [-i <interface=$CONFIG_NAME>]\n" \
	     "                [-n <network-id=$NETWORKID>]\n" \
	     "                [-o <format=$OUTPUT>]\n" \
	     "                [-P <client-public>]"
}

local NETWORKID=0
local CONFIG_ROOT="/etc/wireguard"
local CONFIG_NAME="wg-$HOST"
local SERVER_ENDPOINT="$(< /etc/hostname)"
local OUTPUT="qr"

local CLIENT_SECKEY=""
local CLIENT_PUBKEY=""

while getopts "C:F:i:n:o:P:h" opt; do
	case "$opt" in
		C)
			CONFIG_ROOT="$OPTARG"
			;;
		F)
			SERVER_ENDPOINT="$OPTARG"
			;;
		i)
			CONFIG_NAME="$OPTARG"
			;;
		n)
			NETWORKID="$OPTARG"
			;;
		o)
			OUTPUT="$OPTARG"
			;;
		P)
			CLIENT_PUBKEY="$OPTARG"
			;;
		h)
			usage
			;;
		\:)
			echo "missing argument: -$OPTARG" >&2
			usage
			;;
		\?)
			echo "invalid option: -$OPTARG" >&2
			usage
			;;
	esac
done
local NETWORKID_HEX="$(printf '%.2x' "$NETWORKID")"

function qrencode_cat() {
	qrencode -t ansiutf8
}

local formatter=
case "$OUTPUT" in
	qr)
		formatter=qrencode_cat
		;;
	text)
		formatter=cat
		;;
	*)
		bail "Unknown formatter $OUTPUT"
		;;
esac

local CONFIG="$CONFIG_ROOT/$CONFIG_NAME.conf"

# If there is no config already there, we need to quickly set it up.
if ! [ -f "$CONFIG" ]
then
	# NOTE: This is kind of ugly to get the default interface. Should also be
	#       configurable.
	HOST_NIC="$(route -n | awk '$1 == "0.0.0.0" { print $8 }')"
	log "Generating $CONFIG header (host_nic=$HOST_NIC)."
	cat >"$CONFIG" <<-EOF
	[Interface]
	Address = $(generate_addresses)
	ListenPort = 51820
	PrivateKey = $(wg genkey)
	# IPv4
	PostUp   = iptables -A FORWARD -i %i -j ACCEPT
	PostUp   = iptables -A FORWARD -o %i -j ACCEPT
	PostUp   = iptables -t nat -A POSTROUTING -o $HOST_NIC -j MASQUERADE
	PostDown = iptables -D FORWARD -i %i -j ACCEPT
	PostDown = iptables -D FORWARD -o %i -j ACCEPT
	PostDown = iptables -t nat -D POSTROUTING -o $HOST_NIC -j MASQUERADE
	# IPv6
	PostUp   = ip6tables -A FORWARD -i %i -j ACCEPT
	PostUp   = ip6tables -A FORWARD -o %i -j ACCEPT
	PostUp   = ip6tables -t nat -A POSTROUTING -o $HOST_NIC -j MASQUERADE
	PostDown = ip6tables -D FORWARD -i %i -j ACCEPT
	PostDown = ip6tables -D FORWARD -o %i -j ACCEPT
	PostDown = ip6tables -t nat -D POSTROUTING -o $HOST_NIC -j MASQUERADE
	EOF
fi

# Only generate a key if it's not provided. Generating keys for users is quite
# dodgy already, but is required in order to make the setup require no
# round-trips or manual editing.
if [ -z "$CLIENT_PUBKEY" ]
then
	log "No public key given (-P), generating new private key for client."
	CLIENT_SECKEY="$(wg genkey)"
	CLIENT_PUBKEY="$(wg pubkey <<<"$CLIENT_SECKEY")"
fi
local PRESHAREDKEY="$(wg genpsk)"

[[ -n "$CLIENT_PUBKEY" ]] || bail "Failed to generate public key using $CLIENT_SECKEY."

# TODO: Parse TOML properly...
local NEW_DEVICEID="$(($(grep "\[Peer\]" "$CONFIG" | wc -l) + 1))"
local SERVER_PUBKEY="$(grep "PrivateKey = " "$CONFIG" | sed -E 's/^[^=]*= (.*)$/\1/' | wg pubkey)"

# Add to configuration.
log "Updating $CONFIG for client (10.$NETWORKID.$NEW_DEVICEID.1)."
(
cat "$CONFIG" - <<EOF

# device-$NEW_DEVICEID
[Peer]
PublicKey = $CLIENT_PUBKEY
PreSharedKey = $PRESHAREDKEY
AllowedIPs = $(generate_addresses "$NEW_DEVICEID")
EOF
) | sponge "$CONFIG"

# Ensure that ip_forward=1 is set.
log "Ensuring IP forwarding is enabled."
sysctl -w net.ipv4.ip_forward=1          >/dev/null || bail "Failed to set net.ipv4.ip_forward=1."
sysctl -w net.ipv6.conf.all.forwarding=1 >/dev/null || bail "Failed to set net.ipv6.conf.all.forwarding=1."

# Update the configuration of the interface.
log "Restarting host-side wireguard interface with new $CONFIG."
systemctl restart "wg-quick@$CONFIG_NAME" || bail "Failed to restart wg-quick@$CONFIG_NAME"

# Generate QR code for new device.
printf "=== CONFIGURATION ===\n\n"
"$formatter" <<EOF
[Interface]
Address = $(generate_addresses "$NEW_DEVICEID" 16)
PrivateKey = $CLIENT_SECKEY

[Peer]
Endpoint = $SERVER_ENDPOINT:51820
PublicKey = $SERVER_PUBKEY
PreSharedKey = $PRESHAREDKEY
AllowedIPs = 0.0.0.0/0,::/0
EOF
