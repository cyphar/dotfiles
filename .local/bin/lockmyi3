#!/bin/zsh

# Output help page.
function _help() {
cat <<EOH
usage: lockmyi3 [-h] [-p <size=20>] [options]...

Locks your screen with i3lock, using a pixelated version of the current screen
as the background.

Options:
  -p <size=20> -- Set the the size of each blocky pixel to <size> (in pixels).
  options      -- Options that are passed through to i3lock.
EOH
}

# Helper to calculate simple expressions.
function _calc() {
	bc -q <<<"$1"
}

# Get the options.
local __block_size=20
while getopts "p:h" __opt; do
	case "$__opt" in
		(p)
			__block_size="${OPTARG}"
			;;
		(h)
			_help
			exit 0;;
	esac
done

# Get pass-through options.
shift $(_calc "${OPTIND}-1")

# Gets the (width, height) of the screen.
read __screen_x __screen_y <<<$(xrandr -q | grep '*' | awk '{ split($1, res, "x"); print res[1], res[2];}')

# Calculate the "reduced" height and width for the down-scaling.
local __reduced_x=$(_calc "${__screen_x}/${__block_size}")
local __reduced_y=$(_calc "${__screen_y}/${__block_size}")

# Actually do the locking (generate the image without temporary files to not
# clutter the filesystem). Since `convert -scale` doesn't do blurring, scaling
# down and then back up is an efficient method of producing a pixelated image.
i3lock $* -i <(import -screen -window root -silent png:- | convert png:- -scale '!'"${__reduced_x}x${__reduced_y}" -scale '!'"${__screen_x}x${__screen_y}" png:-)
